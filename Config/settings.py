"""
Django settings for Config project.

Generated by 'django-admin startproject' using Django 4.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os  # new
from pathlib import Path
import environ

env = environ.Env()
# reading .env file
environ.Env.read_env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = int(env("DEBUG", default=0))

from django.core.management.utils import get_random_secret_key

# SECURITY WARNING: keep the secret key used in production secret!

SECRET_KEY = get_random_secret_key()

# custome
ENVIRONMENT = env("ENVIRONMENT", default="development")
if ENVIRONMENT == "production":
    SECURE_BROWSER_XSS_FILTER = True
    X_FRAME_OPTIONS = "DENY"
    # SECURE_SSL_REDIRECT = True
    SECURE_HSTS_SECONDS = 3600
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")


# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
MAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST_USER = env("EMAIL_HOST_USER")
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
EMAIL_HOST = env("EMAIL_HOST")
EMAIL_USE_TLS = True
EMAIL_PORT = 587
EMAIL_HOST_PASSWORD = env("EMAIL_HOST_PASSWORD")
EMAIL_USE_SSL = False

ALLOWED_HOSTS = []
CSRF_TRUSTED_ORIGINS = [env("TRUSTED_ORIGIN")]

INTERNAL_IPS = [
    # ...
    "127.0.0.1",
    "103.76.122.75",
    # ...
]
if DEBUG:
    import socket  # only if you haven't already imported this

    hostname, _, ips = socket.gethostbyname_ex(socket.gethostname())
    INTERNAL_IPS = [ip[: ip.rfind(".")] + ".1" for ip in ips] + [
        "127.0.0.1",
        "10.0.2.2",
    ]
# Application definition

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
 'cloudinary_storage',
    'cloudinary',

    "photomaker",
    "bgremove",
    "crispy_forms",
    "crispy_bootstrap5",
    "compressor",
    "allauth",  # new
    "allauth.account",  # new
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    "debug_toolbar",
]
# django-allauth config

SITE_ID = 1  # new
AUTHENTICATION_BACKENDS = (
    "allauth.account.auth_backends.AuthenticationBackend",
    "django.contrib.auth.backends.ModelBackend",
   
)
# accounts
from django.urls import reverse_lazy
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': '506815430395-57tjo2trk4tq5oealfcoinicj0b7oade.apps.googleusercontent.com',
            'secret': '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',
            'key': ''
        },
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
            # 'redirect_uri': 'http://127.0.0.1:8000/<custom-url>'
        }
    }
}
ACCOUNT_DEFAULT_HTTP_PROTOCOL='https'
LOGIN_URL = reverse_lazy("account_login")
LOGOUT_REDIRECT_URL = reverse_lazy("login_view")
# usermanage
ACCOUNT_USERNAME_REQUIRED = True  # new
ACCOUNT_AUTHENTICATION_METHOD = "email"  # new
ACCOUNT_EMAIL_REQUIRED = True  # new
ACCOUNT_UNIQUE_EMAIL = True  # new
# AUTH_USER_MODEL = "users.CustomUser"  # new
LOGIN_REDIRECT_URL = reverse_lazy("photo:index")
# ACCOUNT_ADAPTER = "users.adapter.AccountAdapter"
LOGOUT_REDIRECT_URL = reverse_lazy("photo:index")  # new
ACCOUNT_LOGOUT_REDIRECT = reverse_lazy("photo:index")  # new
ACCOUNT_SESSION_REMEMBER = True  # new
ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = False  # new
# ACCOUNT_SIGNUP_FORM_CLASS = "users.forms.CustomUserCreationForm"
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 1
# ACCOUNT_EMAIL_VERIFICATION = "mandatory"
ACCOUNT_LOGIN_ATTEMPTS_LIMIT = 5
# AUTO LOGOUT
from datetime import timedelta

# ACCOUNT_FORMS = {
#     "login": "users.forms.CustomLoginForm",
#     # Use our custom signup form
#     "signup": "users.forms.CustomSignupForm",
# }
# ACCOUNT_ALLOW_SIGNUPS = False
# AUTO_LOGOUT = {
#     "IDLE_TIME": timedelta(minutes=30),
#     "SESSION_TIME": timedelta(minutes=60),
#     "MESSAGE": "The session has expired. Please login again to continue.",
#     "REDIRECT_TO_LOGIN_IMMEDIATELY": True,
# }
# accounts end
AUTHENTICATION_BACKENDS = (
    'allauth.account.auth_backends.AuthenticationBackend',
    'django.contrib.auth.backends.ModelBackend',
)


CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"

CRISPY_TEMPLATE_PACK = "bootstrap5"
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",  # new
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware",
    "debug_toolbar.middleware.DebugToolbarMiddleware",
]

ROOT_URLCONF = 'Config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
STATIC_URL = "static/"
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static/"),
    os.path.join(BASE_DIR, "media/")
]  # new
# STATIC_ROOT = "staticfiles/"
MEDIA_URL = '/media/'

STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles/")  # new

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
from django.conf import settings
# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
CLOUDINARY_STORAGE = {
    'CLOUD_NAME': env('CLOUD_NAME'),
    'API_KEY': env('API_KEY'),
    'API_SECRET': env('API_SECRET'),
    'SECURE': True,
    'MEDIA_TAG': 'media',
    'INVALID_VIDEO_ERROR_MESSAGE': 'Please upload a valid video file.',
    'EXCLUDE_DELETE_ORPHANED_MEDIA_PATHS': (),
    'STATIC_TAG': 'static',
    'STATICFILES_MANIFEST_ROOT': os.path.join(BASE_DIR, 'manifest'),
    'STATIC_IMAGES_EXTENSIONS': ['jpg', 'jpe', 'jpeg', 'jpc', 'jp2', 'j2k', 'wdp', 'jxr',
                                 'hdp', 'png', 'gif', 'webp', 'bmp', 'tif', 'tiff', 'ico'],
    'STATIC_VIDEOS_EXTENSIONS': ['mp4', 'webm', 'flv', 'mov', 'ogv' ,'3gp' ,'3g2' ,'wmv' ,
                                 'mpeg' ,'flv' ,'mkv' ,'avi'],
    'MAGIC_FILE_PATH': 'magic',
    'PREFIX': settings.MEDIA_URL
}
STORAGES = {
    #  "default": {
    #     "BACKEND": "cloudinary_storage.storage.MediaCloudinaryStorage",
    # },
    # "default": {
    #     "BACKEND": "django_webdav_storage.storage.WebDavStorage",
    # },
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
   "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}
DATABASES = {
    "default": {
         "ENGINE": "django.db.backends.sqlite3",
        "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
        # "ENGINE": env("ENGINE"),  # <-- UPDATED line
        # "NAME": env("DATABASE_NAME"),
        # "USER": env("DATABASE_USER"),
        # "PASSWORD": env("DATABASE_PASS"),
        # "HOST": env("DATABASE_HOST"),
        # "DAILECT": env("DAILECT"),
        # "PORT": env("DATABASE_PORT"),
        # "ENGINE": "django.db.backends.sqlite3",
        # "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
        # "ENGINE": "django.db.backends.postgresql",
        # "NAME": "postgres",
        # "USER": "postgres",
        # "PASSWORD": "postgres",
        # "HOST": "db",
        # "PORT": 5432,
    }
}
# # DJANGO URL
import dj_database_url

db_from_env = dj_database_url.config(conn_max_age=500)
DATABASES["default"].update(db_from_env)
# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True



# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

"""
Django settings for PassPhoto project.

Generated by 'django-admin startproject' using Django 4.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os  # new
from pathlib import Path
import environ

env = environ.Env()
# reading .env file
environ.Env.read_env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# DEBUG
import socket

hostname, _, ips = socket.gethostbyname_ex(socket.gethostname())
INTERNAL_IPS = [ip[:-1] + "1" for ip in ips]
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# For Production
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = int(env("DEBUG", default=0))


from django.core.management.utils import get_random_secret_key

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'django-insecure-jpjhb)$cjy4k=j#x76x%d90a4)e(1$zs)p!rj7lw#tm_r$-wzd'
SECRET_KEY = get_random_secret_key()
# ENVIRONMENT = env("ENVIRONMENT", default="development")
# if ENVIRONMENT == "production":
#     SECURE_BROWSER_XSS_FILTER = True
#     X_FRAME_OPTIONS = "DENY"
#     SECURE_SSL_REDIRECT = True
#     SECURE_HSTS_SECONDS = 3600
#     SECURE_HSTS_INCLUDE_SUBDOMAINS = True
#     SECURE_HSTS_PRELOAD = True
#     SECURE_CONTENT_TYPE_NOSNIFF = True
#     SESSION_COOKIE_SECURE = True
#     CSRF_COOKIE_SECURE = True
#     SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")


# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
MAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST_USER = env("EMAIL_HOST_USER")
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
EMAIL_HOST = env("EMAIL_HOST")
EMAIL_USE_TLS = True
EMAIL_PORT = 587
EMAIL_HOST_PASSWORD = env("EMAIL_HOST_PASSWORD")
EMAIL_USE_SSL = False

ALLOWED_HOSTS = ['.passphoto.shop','103.235.106.28','localhost','127.0.0.1']

#
INTERNAL_IPS = [
    # ...
    "127.0.0.1",
    # ...
]
if DEBUG:
    import socket  # only if you haven't already imported this

    hostname, _, ips = socket.gethostbyname_ex(socket.gethostname())
    INTERNAL_IPS = [ip[: ip.rfind(".")] + ".1" for ip in ips] + [
        "127.0.0.1",
        "10.0.2.2",
    ]
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'cloudinary_storage',
    'django.contrib.staticfiles',
    'cloudinary',

    "photomaker",
 

    "bgremove",
    "crispy_forms",
    "crispy_bootstrap5",
    "compressor",
    "allauth",  # new
    "allauth.account",  # new
    "debug_toolbar",
]
CLOUDINARY_STORAGE = {
    'CLOUD_NAME': 'dima9tzbx',
    'API_KEY': '517528128926928',
    'API_SECRET': 'WxkGkyPAExigNMx0Cf0YQ69IXTI'
}

MEDIA_URL = '/media/'  # or any prefix you choose
DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'
STORAGES = {
    "staticfiles": {
        "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
    },
}

# django-allauth config
SITE_ID = 1  # new
AUTHENTICATION_BACKENDS = (
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
)
# accounts
from django.urls import reverse_lazy

LOGIN_URL = reverse_lazy("account_login")
LOGOUT_REDIRECT_URL = reverse_lazy("login_view")
# usermanage
ACCOUNT_USERNAME_REQUIRED = True  # new
ACCOUNT_AUTHENTICATION_METHOD = "email"  # new
ACCOUNT_EMAIL_REQUIRED = True  # new
ACCOUNT_UNIQUE_EMAIL = True  # new
# AUTH_USER_MODEL = "users.CustomUser"  # new
LOGIN_REDIRECT_URL = reverse_lazy("photo:index")
# ACCOUNT_ADAPTER = "users.adapter.AccountAdapter"
LOGOUT_REDIRECT_URL = reverse_lazy("photo:index")  # new
ACCOUNT_LOGOUT_REDIRECT = reverse_lazy("photo:index")  # new
ACCOUNT_SESSION_REMEMBER = True  # new
ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = False  # new
# ACCOUNT_SIGNUP_FORM_CLASS = "users.forms.CustomUserCreationForm"
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 1
# ACCOUNT_EMAIL_VERIFICATION = "mandatory"
ACCOUNT_LOGIN_ATTEMPTS_LIMIT = 5
# AUTO LOGOUT
from datetime import timedelta

# ACCOUNT_FORMS = {
#     "login": "users.forms.CustomLoginForm",
#     # Use our custom signup form
#     "signup": "users.forms.CustomSignupForm",
# }
# ACCOUNT_ALLOW_SIGNUPS = False
# AUTO_LOGOUT = {
#     "IDLE_TIME": timedelta(minutes=30),
#     "SESSION_TIME": timedelta(minutes=60),
#     "MESSAGE": "The session has expired. Please login again to continue.",
#     "REDIRECT_TO_LOGIN_IMMEDIATELY": True,
# }
# accounts end

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"

CRISPY_TEMPLATE_PACK = "bootstrap5"
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
     "whitenoise.middleware.WhiteNoiseMiddleware",  # new
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware",
    "debug_toolbar.middleware.DebugToolbarMiddleware",
]
ROOT_URLCONF = 'PassPhoto.urls'

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]


WSGI_APPLICATION = 'PassPhoto.wsgi.application'

STATIC_URL = "static/"
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static/"),
    os.path.join(BASE_DIR, "media/")
]  # new
# STATIC_ROOT = "staticfiles/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")  # new
# mdeidia setting
# MEDIA_URL = "/media/"  # new
# MEDIA_ROOT = os.path.join(BASE_DIR, "media")  # new



DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
        # "ENGINE": "django.db.backends.postgresql",
        # "NAME": "postgres",
        # "USER": "postgres",
        # "PASSWORD": "postgres",
        # "HOST": "db",
        # "PORT": 5432,
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# # DJANGO URL
import dj_database_url

db_from_env = dj_database_url.config(conn_max_age=500)
DATABASES["default"].update(db_from_env)
# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/
# FTP_USER = 'passphoto'#os.environ['FTP_USER']
# FTP_PASS = 'sWJkmHrNrF8xGzsj'#os.environ['FTP_PASS']
# FTP_PORT = '21'#os.environ['FTP_PORT']

# DEFAULT_FILE_STORAGE = 'storages.backends.ftp.FTPStorage'
# FTP_STORAGE_LOCATION = 'ftp://' + FTP_USER + ':' + FTP_PASS + '@103.76.122.75:' + FTP_PORT
# MEDIA_URL = 'ftp://103.76.122.75'
# MEDIA_ROOT = 'ftp://103.76.122.75'#os.path.join(BASE_DIR, "static_cdn", "media_root")
# DEFAULT_FILE_STORAGE = 'storages.backends.ftp.FTPStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# # new
# MEDIA_URL = "/media/"
# MEDIA_ROOT = os.path.join(BASE_DIR, "media")
# STATIC_URL = "static/"
# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, "static/"),
#     os.path.join(BASE_DIR, "media/"),
# ]  # new
# STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")  # new
STATICFILES_FINDERS = (
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
    # other finders..
    "compressor.finders.CompressorFinder",
)